#
OPERATORS
  + Addition
  - Subtraction
  * Multiplication
  / Division
  % Mod (the remainder after dividing)
  ** Exponentiation (note that ^ does not do this operation, as you might have seen in other languages)
  // Divides and rounds down to the nearest integer
http://mathforum.org/dr.math/faq/faq.order.operations.html
https://wiki.python.org/moin/BitwiseOperators


#
RESERVED WORDS
You may not name your variables any of the following words as they mean special things in Python:
and	assert	break	class	continue
def	del	elif	else	except
exec	finally	for	from	global
if	import	in	is	lambda
not	or	pass	print	raise
return	try	while
Do NOT use any of the following words either (although they are not strictly Python reserved words, they conflict with the names of commonly-used Python functions):
Data	Float	Int	Numeric	Oxphys
array	close	float	int	input
open	range	type	write	zeros
You should also avoid all the names defined in the math library (you must avoid them if you import the library):
acos	asin	atan	cos	e
exp	fabs	floor	log	log10
pi	sin	sqrt	tan


#
SYNTAX RULES
https://www.python.org/dev/peps/pep-0008/
Spaces or Tabs?
The Python Style Guide recommends using 4 spaces to indent,
rather than using a tab. Whichever you use, be aware that "Python 3 disallows
mixing the use of tabs and spaces for indentation.


#
PRINT
  print(san_francisco_pop_density > rio_de_janeiro_pop_density) - PRINT True or False
  if (san_francisco_pop_density > rio_de_janeiro_pop_density):
      print (True)
  else:
      print (False)


#
STRINGS

  print(len("ababa") / len("ab"))
  string = 'abA _Dam'
  print(string.lower().replace(" ", "_"))
https://docs.python.org/3.6/library/string.html#format-string-syntax


#
LISTS

  >>> list_of_random_things = [1, 3.4, 'a string', True]
  >>> list_of_random_things[1:2]
  [3.4]
  >>> list_of_random_things[:2]
  [1, 3.4]
  >>> list_of_random_things[1:]
  [3.4, 'a string', True]
  >>> 'this' in 'this is a string'
  True
  >>> 'in' in 'this is a string'
  True
  >>> 'isa' in 'this is a string'
  False
  >>> 5 not in [1, 2, 3, 4, 6]
  True
  >>> 5 in [1, 2, 3, 4, 6]
  False
  >>> my_lst = [1, 2, 3, 4, 5]
  >>> my_lst[0] = 'one'
  >>> print(my_lst)
  ['one', 2, 3, 4, 5]
# As shown above, you are able to replace 1 with 'one' in the above list. This is because lists are mutable.
# However, the following does not work:
  >>> greeting = "Hello there"
  >>> greeting[0] = 'M'
# This is because strings are immutable.

  len() returns how many elements are in a list.
  max() returns the greatest element of the list.
  min() returns the smallest element in a list. min is the opposite of max, which returns the largest element in a list.
  sorted() returns a copy of a list in order from smallest to largest, leaving the list unchanged.

# How the greatest element is determined depends on what type objects are in the list.
# The maximum element in a list of numbers is the largest number.
# The maximum elements in a list of strings is element that would occur last if the list were sorted alphabetically.
# This works because the the max function is defined in terms of the greater than comparison operator.
# The max function is undefined for lists that contain elements from different, incomparable types.

  join() is a string method that takes a list of strings as an argument,
    and returns a string consisting of the list elements joined by a separator string.

  new_str = "\n".join(["fore", "aft", "starboard", "port"])
  print(new_str)
  name = "-".join(["García", "O'Kelly"])
  print(name)
  Output:
  García-O'Kelly

  append() method
    A helpful method called append adds an element to the end of a list.

  letters = ['a', 'b', 'c', 'd']
  letters.append('z')
  print(letters)
  Output:
  ['a', 'b', 'c', 'd', 'z']


#
TUPLES

  location = (13.4125, 103.866667)
  print("Latitude:", location[0])
  print("Longitude:", location[1])
  dimensions = 52, 40, 100
  length, width, height = dimensions
  print("The dimensions are {} x {} x {}".format(length, width, height))

# tuples unpacking:
  length, width, height = 52, 40, 100
  print("The dimensions are {} x {} x {}".format(length, width, height))


#
SETS

  numbers = [1, 2, 6, 3, 1, 1, 6]
  unique_nums = set(numbers)
  print(unique_nums)

  fruit = {"apple", "banana", "orange", "grapefruit"}  # define a set
  print("watermelon" in fruit)  # check for element
  fruit.add("watermelon")  # add an element
  print(fruit)
  print(fruit.pop())  # remove a random element
  print(fruit)

#
DICTIONARIES and IDENTITY OPERATORS


# Dictionaries can have keys of any immutable type, like integers or tuples, not just strings.
# It's not even necessary for every key to have the same type!
# We can look up values or insert new values in the dictionary using square brackets that enclose the key.

  elements = {"hydrogen": 1, "helium": 2, "carbon": 6}
  print(elements["helium"])  # print the value mapped to "helium"
  elements["lithium"] = 3  # insert "lithium" with a value of 3 into the dictionary
  print("carbon" in elements)
  print(elements.get("dilithium"))

# Identity Operators
# Keyword	Operator
# is	evaluates if both sides have the same identity
# is not	evaluates if both sides have different identities
# You can check if a key returned None with the is operator.
# You can check for the opposite using is not.

  n = elements.get("dilithium")
  print(n is None)
  print(n is not None)
  This would output:
  True
  False


#
COMPOUND DATA STRUCTURES

  elements = {"hydrogen": {"number": 1,
                           "weight": 1.00794,
                           "symbol": "H"},
                "helium": {"number": 2,
                           "weight": 4.002602,
                           "symbol": "He"}}
  helium = elements["helium"]  # get the helium dictionary
  hydrogen_weight = elements["hydrogen"]["weight"]  # get hydrogen's weight

# You can also add a new key to the element dictionary.

  oxygen = {"number":8,"weight":15.999,"symbol":"O"}  # create a new oxygen dictionary
  elements["oxygen"] = oxygen  # assign 'oxygen' as a key to the elements dictionary
  print('elements = ', elements)
  Output is:
  elements =  {"hydrogen": {"number": 1,
                            "weight": 1.00794,
                            "symbol": 'H'},
                 "helium": {"number": 2,
                            "weight": 4.002602,
                            "symbol": "He"},
                 "oxygen": {"number": 8,
                            "weight": 15.999,
                            "symbol": "O"}}
  elements = {'hydrogen': {'number': 1, 'weight': 1.00794, 'symbol': 'H'},
  'helium': {'number': 2, 'weight': 4.002602, 'symbol': 'He'}}
  elements['hydrogen']['is_noble_gas'] = False
  elements['helium']['is_noble_gas'] = True


#
CONDITIONAL STATEMENTS

# First Example - try changing the value of phone_balance
  phone_balance = 10
  bank_balance = 50

  if phone_balance < 10:
      phone_balance += 10
      bank_balance -= 10

  print(phone_balance)
  print(bank_balance)

# Second Example - try changing the value of number
  number = 145
  if number % 2 == 0:
      print("Number " + str(number) + " is even.")
  else:
      print("Number " + str(number) + " is odd.")
#Third Example - try to change the value of age
  age = 35
# Here are the age limits for bus fares
  free_up_to_age = 4
  child_up_to_age = 18
  senior_from_age = 65
# These lines determine the bus fare prices
  concession_ticket = 1.25
  adult_ticket = 2.50
# Here is the logic for bus fare prices
  if age <= free_up_to_age:
      ticket_price = 0
  elif age <= child_up_to_age:
      ticket_price = concession_ticket
  elif age >= senior_from_age:
      ticket_price = concession_ticket
  else:
      ticket_price = adult_ticket
  message = "Somebody who is {} years old will pay ${} to ride the bus.".format(age, ticket_price)
  print(message)
  answer = 35
  guess = 30   # this is just a sample answer and guess
  if guess < answer:
      result = "Oops!  Your guess was too low."
  elif guess > answer:
     result = "Oops!  Your guess was too high."
  elif guess==answer:
      result = "Nice!  Your guess matched the answer!"
  print(result)

  state = 'CA'
  purchase_amount = 20.00    # a sample state and purchase amount
  if state == 'CA':
      tax_amount = .075
      total_cost = purchase_amount*(1+tax_amount)
      result = "Since you're from {}, your total cost is {}.".format(state, total_cost)
  elif state == 'MN':
      tax_amount = .095
      total_cost = purchase_amount*(1+tax_amount)
      result = "Since you're from {}, your total cost is {}.".format(state, total_cost)
  elif state == 'NY':
      tax_amount = .089
      total_cost = purchase_amount*(1+tax_amount)
      result = "Since you're from {}, your total cost is {}.".format(state, total_cost)
  print(result)

  if 18.5 <= weight / height**2 < 25:
      print("BMI is considered 'normal'")
  if is_raining and is_sunny:
      print("Is there a rainbow?")
  if (not unsubscribed) and (location == "USA" or location == "CAN"):
      print("send email")
  # Bad example
    if is_cold == True:
        print("The weather is cold!")
  # Good example
    if is_cold:
        print("The weather is cold!")

# If you want to check whether a boolean is False, you can use the not operator.
  errors = 3
  if errors:
      print("You have {} errors to fix!".format(errors))
  else:
      print("No errors to fix!")


#
LOOPS
  for i in range(3):
      print("Hello!")
  range(start=0, stop, step=1)
# Creating a new list
  cities = ['new york city', 'mountain view', 'chicago', 'los angeles']
  capitalized_cities = []
  for city in cities:
      capitalized_cities.append(city.title())

  cities = ['new york city', 'mountain view', 'chicago', 'los angeles']
# We can use the range() function to generate the indices for each value in the cities list.
# This lets us access the elements of the list with cities[index] so that we can modify the values in the cities list in place.
  for index in range(len(cities)):
      cities[index] = cities[index].title()

  usernames = ["Joey Tribbiani", "Monica Geller", "Chandler Bing", "Phoebe Buffay"]
  for i in range(len(usernames)):
      usernames[i] = usernames[i].lower().replace(" ", "_")
  print(usernames)

  tokens = ['<greeting>', 'Hello World!', '</greeting>']
  count = 0
  for token in tokens:
      if token[0] == '<' and token[-1] == '>':
          count += 1
  print(count)

  items = ['first string', 'second string']
  html_str = "<ul>\n"          # The "\n" here is the end-of-line char, causing
                               # chars after this in html_str to be on next line
  for item in items:
      html_str += "<li>{}</li>\n".format(item)
  html_str += "</ul>"
  print(html_str)
  Output:
  <ul>
  <li>first string</li>
  <li>second string</li>
  </ul>


#
LISTS PROCESSING

# pythonic valua swapping
  a, b = 5, 10
  print(a, b)
  a, b = b, a
  print(a, b)

# create string from a list
  a = ['Python', 'is', 'awesome']
  print(' '.join(a))

# most frequent element in a list
  a = [1, 2, 3, 1, 2, 3, 2, 2, 2, 4, 5, 1]
  print(max(set(a), key = a.count))

# most frequent element in a list with use counter from collection
# from collections import Counter
  cnt = Counter(a)
  print(cnt.most_common(3))

# checking if 2 words are anagrams
  from collections import Counter
  Counter(str1) == Counter(str2)

# reversing string with special case of step parameters
  a = 'abcdeufkanmweioquwe'
  print(a[::-1])

# iterating over string contents in reverse efficiently
  for char in reversed(a):
    print(char)

# reversing an integer trough type conversion and slicing
  num = 2323445
  print(int(str(num)[::-1]))

# reverse a list with special case of slice step param
  a = [5, 4, 3, 2, 1]
  print(a[::-1])

# iterating over list of contents in reverse efficiently
  for ele in reversed(a):
    print(ele)

# transpose 2d array
  original = [['a', 'b'], ['c', 'd'], ['e', 'f']]
  transposed = zip(*original)
  print(list(transposed))

# chained comparison
  b = 6
  print(4 < b < 7)
  print(1 == b <)

# chained function call
  def product(a, b)
    return a * b

  def add(a, b)
    return a + b

  b = True
  print((product if b else add)(5, 7))

# copying lists
  b = a
  b[0] = 10

  b = a[:]
  b = a[0]

  a = [1, 2, 3, 4, 5]
  print(list(a))
  print(a.copy())


# from copy import deepcopy
  l = [[1, 2], [3, 4]]
  l2 = deepcopy(l)
  print(l2)

# more algorithms:
# https://github.com/brennerm/PyTricks


#
ITERATE TROUGH DICTIONARIES

  cast = {
             "Jerry Seinfeld": "Jerry Seinfeld",
             "Julia Louis-Dreyfus": "Elaine Benes",
             "Jason Alexander": "George Costanza",
             "Michael Richards": "Cosmo Kramer"
         }
  print("Iterating through keys:")
  for key in cast:
      print(key)
  print("\nIterating through keys and values:")
  for key, value in cast.items():
      print("Actor: {}    Role: {}".format(key, value))

# Use the dictionary and list to count the total number
# of fruits, but you do not want to count the other items in your basket.
  result = 0
  basket_items = {'apples': 4, 'oranges': 19, 'kites': 3, 'sandwiches': 8}
  fruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']

# Iterate through the dictionary
  for fruit in fruits:
      for key, value in basket_items.items():
          if fruit == key:
              result += value

# if the key is in the list of fruits, add the value (number of fruits) to result
  print(result)

# Use the dictionary and list to count the total number
# of fruits and not_fruits.
  fruit_count, not_fruit_count = 0, 0
  basket_items = {'apples': 4, 'oranges': 19, 'kites': 3, 'sandwiches': 8}
  fruits = ['apples', 'oranges', 'pears', 'peaches', 'grapes', 'bananas']
  for item, value in basket_items.items():
      if item in fruits:
          fruit_count += value
      else:
          not_fruit_count += value
  print(fruit_count, not_fruit_count)

# number to find the factorial of
  number = 6
# start with our product equal to one
  product = 1
# track the current number being multiplied
  current = 1
  while  current <= number:
      # multiply the product so far by the current number
      product *= current
      # increment current with each iteration until it reaches number
      current += 1
# print the factorial of number
  print(product)
# number we'll find the factorial of
  number = 6
# start with our product equal to one
  product = 1
# calculate factorial of number with a for loop
  for num in range(2, number + 1):
      product *= num
# print the factorial of number
  print(product)


# count by method
  start_num = 5
  end_num = 100
  count_by = 2
  break_num = start_num
  while break_num < end_num:
      break_num += count_by
  print(break_num)

# count by check method
  start_num = 5
  end_num = 100
  count_by = 2
  if start_num > end_num:
      result = "Oops! Looks like your start value is greater than the end value. Please try again."
  else:
      break_num = start_num
      while break_num < end_num:
          break_num += count_by
      result = break_num
  print(result)


# nearest square
  limit = 40
  num = 0
  while (num+1)**2 < limit:
      num += 1
  nearest_square = num**2
  print(nearest_square)


#
BREAK and CONTINUE

# Sometimes we need more control over when a loop should end, or skip an iteration.
# In these cases, we use the break and continue keywords, which can be used in both for and while loops.
# break terminates a loop
# continue skips one iteration of a loop

# the code breaks the loop when weight exceeds or reaches the limit
  manifest = [("bananas", 15), ("mattresses", 24), ("dog kennels", 42), ("machine", 120), ("cheeses", 5)]
  print("METHOD 1")
  weight = 0
  items = []
  for cargo_name, cargo_weight in manifest:
      print("current weight: {}".format(weight))
      if weight >= 100:
          print("  breaking loop now!")
          break
      else:
          print("  adding {} ({})".format(cargo_name, cargo_weight))
          items.append(cargo_name)
          weight += cargo_weight
  print("\nFinal Weight: {}".format(weight))
  print("Final Items: {}".format(items))

# skips an iteration when adding an item would exceed the limit
# breaks the loop if weight is exactly the value of the limit
  print("\nMETHOD 2")
  weight = 0
  items = []
  for cargo_name, cargo_weight in manifest:
      print("current weight: {}".format(weight))
      if weight >= 100:
          print("  breaking from the loop now!")
          break
      elif weight + cargo_weight > 100:
          print("  skipping {} ({})".format(cargo_name, cargo_weight))
          continue
      else:
          print("  adding {} ({})".format(cargo_name, cargo_weight))
          items.append(cargo_name)
          weight += cargo_weight
  print("\nFinal Weight: {}".format(weight))
  print("Final Items: {}".format(items))

# break and continue EXAMPLE
# Write a loop with a break statement to create a string, news_ticker, that is exactly 140 characters long.
# You should create the news ticker by adding headlines from the headlines list, inserting a space in between each headline.
# If necessary, truncate the last headline in the middle so that news_ticker is exactly 140 characters long.
# Remember that break works in both for and while loops.
# Use whichever loop seems most appropriate.
# Consider adding print statements to your code to help you resolve bugs.
# HINT: modify the headlines list to verify your loop works with different inputs
  headlines = ["Local Bear Eaten by Man",
               "Legislature Announces New Laws",
               "Peasant Discovers Violence Inherent in System",
               "Cat Rescues Fireman Stuck in Tree",
               "Brave Knight Runs Away",
               "Papperbok Review: Totally Triffic"]
               headlines = ["Local Bear Eaten by Man",
                            "Legislature Announces New Laws",
                            "Peasant Discovers Violence Inherent in System",
                            "Cat Rescues Fireman Stuck in Tree",
                            "Brave Knight Runs Away",
                            "Papperbok Review: Totally Triffic"]
  news_ticker = ""
  for headline in headlines:
     news_ticker += headline + " "
     if len(news_ticker) >= 140:
         news_ticker = news_ticker[:140]
         break
  print(news_ticker)



#
ZIP and ENUMERATES

# zip and enumerate are useful built-in functions that can come in handy when dealing with loops.
# zip returns an iterator that combines multiple iterables into one sequence of tuples.
# Each tuple contains the elements in that position from all the iterables. For example, printing

  list(zip(['a', 'b', 'c'], [1, 2, 3])) would output [('a', 1), ('b', 2), ('c', 3)].

# Like we did for range() we need to convert it to a list or iterate through it with a loop to see the elements.
# You could unpack each tuple in a for loop like this.
  letters = ['a', 'b', 'c']
  nums = [1, 2, 3]
  for letter, num in zip(letters, nums):
      print("{}: {}".format(letter, num))

# In addition to zipping two lists together, you can also unzip a list into tuples using an asterisk.
  some_list = [('a', 1), ('b', 2), ('c', 3)]
  letters, nums = zip(*some_list)
# This would create the same letters and nums tuples we saw earlier.

# Enumerate
# enumerate is a built in function that returns an iterator of tuples containing indices and values of a list.
# You'll often use this when you want the index along with each element of an iterable in a loop.
  letters = ['a', 'b', 'c', 'd', 'e']
  for i, letter in enumerate(letters):
      print(i, letter)
  # This code would output:
  0 a
  1 b
  2 c
  3 d
  4 e

# zip and enumerate subject 1
# Use zip to write a for loop that creates a string specifying the label and coordinates of each point and appends
# it to the list points. Each string should be formatted as label: x, y, z. For example, the string for
# the first coordinate should be F: 23, 677, 4.
  x_coord = [23, 53, 2, -12, 95, 103, 14, -5]
  y_coord = [677, 233, 405, 433, 905, 376, 432, 445]
  z_coord = [4, 16, -6, -42, 3, -6, 23, -1]
  labels = ["F", "J", "A", "Q", "Y", "B", "W", "X"]
  points = []
  for point in zip(labels, x_coord, y_coord, z_coord):
      points.append("{}: {}, {}, {}".format(*point))
  for point in points:
      print(point)

# Use zip to create a dictionary cast that uses names as keys and heights as values.
  cast_names = ["Barney", "Robin", "Ted", "Lily", "Marshall"]
  cast_heights = [72, 68, 72, 66, 76]
  cast = dict(zip(cast_names, cast_heights))
  print(cast)
# Unzip the cast tuple into two names and heights tuples.
  cast = (("Barney", 72), ("Robin", 68), ("Ted", 72), ("Lily", 66), ("Marshall", 76))
  names, heights = zip(*cast)
  print(names)
  print(heights)

# Use zip to transpose data from a 4-by-3 matrix to a 3-by-4 matrix. There's actually a cool trick for this!
# Feel free to look at the solutions if you can't figure it out.
  data = ((0, 1, 2), (3, 4, 5), (6, 7, 8), (9, 10, 11))
  data_transpose = tuple(zip(*data))
  print(data_transpose)

# Use enumerate to modify the cast list so that each element contains the name followed by
# the character's corresponding height. For example, the first element of cast should
# change from "Barney Stinson" to "Barney Stinson 72".
  cast = ["Barney Stinson", "Robin Scherbatsky", "Ted Mosby", "Lily Aldrin", "Marshall Eriksen"]
  heights = [72, 68, 72, 66, 76]
  for i, character in enumerate(cast):
      cast[i] = character + " " + str(heights[i])
  print(cast)




#
LIST COMPREHENSIONS

# In Python, you can create lists really quickly and concisely with list comprehensions.
# This example from earlier:

  capitalized_cities = []
    for city in cities:
        capitalized_cities.append(city.title())

# can be reduced to:
  capitalized_cities = [city.title() for city in cities]

# List comprehensions allow us to create a list using a for loop in one step.
# You create a list comprehension with brackets [],
# including an expression to evaluate for each element in an iterable.
# This list comprehension above calls city.title() for each element city in cities,
# to create each element in the new list, capitalized_cities.
# Conditionals in List Comprehensions
# You can also add conditionals to list comprehensions (listcomps).
# After the iterable, you can use the if keyword to check a condition in each iteration.

  squares = [x**2 for x in range(9) if x % 2 == 0]

# The code above sets squares equal to the list [0, 4, 16, 36, 64], as x to the power of 2 is only evaluated if x is even.
# If you want to add an else, you will get a syntax error doing this.

  squares = [x**2 for x in range(9) if x % 2 == 0 else x + 3]

# If you would like to add else, you have to move the conditionals to the beginning of the listcomp, right after the expression, like this.

  squares = [x**2 if x % 2 == 0 else x + 3 for x in range(9)]

# List comprehensions are not found in other languages, but are very common in python.
# Use a list comprehension to create a new list first_names containing just the first names in names in lowercase.

  names = ["Rick Sanchez", "Morty Smith", "Summer Smith", "Jerry Smith", "Beth Smith"]
  first_names = [name.split()[0].lower() for name in names]
  print(first_names)

# Use a list comprehension to create a list multiples_3 containing the first 20 multiples of 3.
  multiples_3 = [x * 3 for x in range(1, 21)]
  print(multiples_3)

# Use a list comprehension to create a list of names passed that only include those that scored at least 65.
  scores = {
               "Rick Sanchez": 70,
               "Morty Smith": 35,
               "Summer Smith": 82,
               "Jerry Smith": 23,
               "Beth Smith": 98
            }
  passed = [name for name, score in scores.items() if score >= 65]
  print(passed)



#
FUNCTIONS

# function definition example
  def cylinder_volume(height, radius):
      pi = 3.14159
      return height * pi * radius ** 2

# default arguments
  def cylinder_volume(height, radius=5):
      pi = 3.14159
      return height * pi * radius ** 2

  cylinder_volume(10, 7)  # pass in arguments by position
  cylinder_volume(height=10, radius=7)  # pass in arguments by name

# function example with number of days conversion
  def readable_timedelta(days):
      # use integer division to get the number of weeks
      weeks = days // 7
      # use % to get the number of days that remain
      remainder = days % 7
      return "{} week(s) and {} day(s).".format(weeks, remainder)
# test your function
  print(readable_timedelta(10))

# functions documentation
  def population_density(population, land_area):
      """Calculate the population density of an area. """
      return population / land_area
  def population_density(population, land_area):
      """Calculate the population density of an area.

      INPUT:
      population: int. The population of that area
      land_area: int or float. This function is unit-agnostic, if you pass in values in terms
      of square km or square miles the function will return a density in those units.

      OUTPUT:
      population_density: population / land_area. The population density of a particular area.
      """
      return population / land_area

# lambda expressions
# lambda are functions that are anonymous and that are good for short operations
  numbers = [
                [34, 63, 88, 71, 29],
                [90, 78, 51, 27, 45],
                [63, 37, 85, 46, 22],
                [51, 22, 34, 11, 18]
             ]
  mean = lambda num_list: sum(num_list) / len(num_list)
  averages = list(map(mean, numbers))
  print(averages)

  cities = ["New York City", "Los Angeles", "Chicago", "Mountain View", "Denver", "Boston"]
  short_cities = list(filter(lambda x: len(x) < 10, cities))
  print(short_cities)



#
ITERATORS AND GENERATORS

  lessons = ["Why Python Programming", "Data Types and Operators", "Control Flow", "Functions", "Scripting"]
  def my_enumerate(iterable, start=0):
      count = start
      for element in iterable:
          yield count, element
          count += 1
  for i, lesson in my_enumerate(lessons, 1):
      print("Lesson {}: {}".format(i, lesson))

# If you have an iterable that is too large to fit in memory in full (e.g., when dealing with large files),
# being able to take and use chunks of it at a time can be very valuable.
# Implement a generator function, chunker, that takes in an iterable and yields a chunk of a specified size at a time.
  def chunker(iterable, size):
      """Yield successive chunks from iterable of length size."""
      for i in range(0, len(iterable), size):
          yield iterable[i:i + size]
  for chunk in chunker(range(25), 4):
      print(list(chunk))

# Here's a cool concept that combines generators and list comprehensions!
# You can actually create a generator in the same way you'd normally write a list comprehension,
# except with parentheses instead of square brackets. For example:

  sq_list = [x**2 for x in range(10)]  # this produces a list of squares
  sq_iterator = (x**2 for x in range(10))  # this produces an iterator of squares


#
USER INPUT

    names = input("Enter names separated by commas: ").title().split(",")
    assignments = input("Enter assignment counts separated by commas: ").split(",")
    grades = input("Enter grades separated by commas: ").split(",")
    message = "Hi {},\n\nThis is a reminder that you have {} assignments left to \
    submit before you can graduate. You're current grade is {} and can increase \
    to {} if you submit all assignments before the due date.\n\n"
    for name, assignment, grade in zip(names, assignments, grades):
        print(message.format(name, assignment, grade, int(grade) + int(assignment)*2))



#
HANDLING ERRORS

while True:
    try:
        x = int(input('Enter a number: '))
        break
    except:
        print('That\'s not a valid number!')
    finally:
        print('\nAttempted Input\n')

# specify exceptions:
while True:
    try:
        x = int(input('Enter a number: '))
        break
    except ValueError:
        print('That\'s not a valid number!')
    except KeyboardInterrupt:
        print('\nNo input taken!')
        break
    finally:
        print('\nAttempted Input\n')
# or like this:
    try:
        # some code
    except (ValueError, KeyboardInterrupt):
        # some code

    def party_planner(cookies, people):
        leftovers = None
        num_each = None
        try:
            num_each = cookies // people
            leftovers = cookies % people
        except ZeroDivisionError:
            print("Oops, you entered 0 people will be attending.")
            print("Please enter a good number of people for a party.")
        return(num_each, leftovers)

# access error messages:
    try:
        # some code
    except ZeroDivisionError as e:
       # some code
       print("ZeroDivisionError occurred: {}".format(e))
# or:
   try:
       # some code
   except Exception as e:
      # some code
      print("Exception occurred: {}".format(e))



#
FILES

# reading files
    f = open('my_path/my_file.txt', 'r')
    file_data = f.read()
    f.close()
# writing files (attention for APPEND mode!)
    f = open('my_path/my_file.txt', 'w')
    f.write("Hello there!")
    f.close()
# too many open files
    files = []
    for i in range(10000):
        files.append(open('some_file.txt', 'r'))
        print(i)
# autoclose
    with open('my_path/my_file.txt', 'r') as f:
        file_data = f.read()
# reading with characters count
# define camelot.txt:
    We're the knights of the round table
    We dance whenever we're able
    with open("camelot.txt") as song:
        print(song.read(2))
        print(song.read(8))
        print(song.read())
# reading line by line
    camelot_lines = []
    with open("camelot.txt") as f:
        for line in f:
            camelot_lines.append(line.strip())
    print(camelot_lines)
# Write a function called create_cast_list that takes a filename as input and
# returns a list of actors' names. It will be run on the file flying_circus_cast.txt
# (this information was collected from imdb.com). Each line of that file consists of an actor's name,
# a comma, and then some (messy) information about roles they played in the programme.
# You'll need to extract only the name and add it to a list. You might use the .split() method to process each line.
    def create_cast_list(filename):
        cast_list = []
        with open(filename) as f:
            for line in f:
                name = line.split(",")[0]
                cast_list.append(name)
        return cast_list
    cast_list = create_cast_list('flying_circus_cast.txt')
    for actor in cast_list:
        print(actor)


#
IMPORTING LOCAL SCRIPTS
# demo.py
    import useful_functions as uf
    scores = [88, 92, 79, 93, 85]
    mean = uf.mean(scores)
    curved = uf.add_five(scores)
    mean_c = uf.mean(curved)
    print("Scores:", scores)
    print("Original Mean:", mean, " New Mean:", mean_c)
    print(__name__)
    print(uf.__name__)

# useful_functions.py
    def mean(num_list):
        return sum(num_list) / len(num_list)
    def add_five(num_list):
        return [n + 5 for n in num_list]
    def main():
        print("Testing mean function")
        n_list = [34, 44, 23, 46, 12, 24]
        correct_mean = 30.5
        assert(mean(n_list) == correct_mean)
        print("Testing add_five function")
        correct_list = [39, 49, 28, 51, 17, 29]
        assert(add_five(n_list) == correct_list)
        print("All tests passed!")
    if __name__ == '__main__':
        main()


#
LIBRARIES

The Python Standard Library has a lot of modules! To help you get familiar with what's available,
here are a selection of our favourite Python Standard Library modules and why we use them!

csv: very convenient for reading and writing csv files
collections: useful extensions of the usual data types including OrderedDict, defaultdict and namedtuple
random: generates pseudo-random numbers, shuffles sequences randomly and chooses random items
string: more functions on strings. This module also contains useful collections of letters like string.digits (a string containing all characters which are valid digits).
re: pattern-matching in strings via regular expressions
math: some standard mathematical functions
os: interacting with operating systems
os.path: submodule of os for manipulating path names
sys: work directly with the Python interpreter
json: good for reading and writing json files (good for web work)


# Use an import statement at the top
    import random
    word_file = "words.txt"
    word_list = []
    #fill up the word_list
    with open(word_file,'r') as words:
    	for line in words:
    		# remove white space and make everything lowercase
    		word = line.strip().lower()
    		# don't include words that are too long or too short
    		if 3 < len(word) < 8:
    			word_list.append(word)
    # Add your function generate_password here
    # It should return a string consisting of three random words
    # concatenated together without spaces
    # test your function
    def generate_password():
        return random.choice(word_list) + random.choice(word_list) + random.choice(word_list)
    print(generate_password())

# Techniques for Importing Modules
# There are other variants of import statements that are useful in different situations.
# To import an individual function or class from a module:
    from module_name import object_name
# To import multiple individual objects from a module:
    from module_name import first_object, second_object
# To rename a module:
    import module_name as new_name
# To import an object from a module and rename it:
    from module_name import object_name as new_name
# To import every object individually from a module (DO NOT DO THIS):
    from module_name import *
# If you really want to use all of the objects from a module, use the standard
# import module_name statement instead and access each of the objects with the dot notation.
    import module_name

# Packages
# Modules that are submodules are specified by the package name and
# then the submodule name separated by a dot. You can import the submodule like this.
    import package_name.submodule_name

# Third Party Libraries

# You can use pip to install all of a project's dependencies at once by typing:
# pip install -r requirements.txt in your command line.

# example requirements.txt:
beautifulsoup4==4.5.1
bs4==0.0.1
pytz==2016.7
requests==2.11.1

# Useful Third-Party Packages
# Being able to install and import third party libraries is useful,
# but to be an effective programmer you also need to know what libraries are available
# for you to use. People typically learn about useful new libraries from
# online recommendations or from colleagues.
# If you're a new Python programmer you may not have many colleagues,
# so to get you started here's a list of packages that are
# popular with engineers at Udacity.

IPython - A better interactive Python interpreter
requests - Provides easy to use methods to make web requests. Useful for accessing web APIs.
Flask - a lightweight framework for making web applications and APIs.
Django - A more featureful framework for making web applications. Django is particularly good for designing complex, content heavy, web applications.
Beautiful Soup - Used to parse HTML and extract information from it. Great for web scraping.
pytest - extends Python's builtin assertions and unittest module.
PyYAML - For reading and writing YAML files.
NumPy - The fundamental package for scientific computing with Python. It contains among other things a powerful N-dimensional array object and useful linear algebra capabilities.
pandas - A library containing high-performance, data structures and data analysis tools. In particular, pandas provides dataframes!
matplotlib - a 2D plotting library which produces publication quality figures in a variety of hardcopy formats and interactive environments.
ggplot - Another 2D plotting library, based on R's ggplot2 library.
Pillow - The Python Imaging Library adds image processing capabilities to your Python interpreter.
pyglet - A cross-platform application framework intended for game development.
Pygame - A set of Python modules designed for writing games.
pytz - World Timezone Definitions for Python

PYTHON - Hierarchy of Online Resources

While there are many online resources about programming,
not all of the them are created equal. This list of resources is
in approximate order of reliability.

The Python Tutorial - This section of the official documentation
surveys Python's syntax and standard library.
It uses examples, and is written using less technical language than the main documentation.
Make sure you're reading the Python 3 version of the docs!

The Python Language and Library References - The Language Reference and Library Reference are
more technical than the tutorial, but they are the definitive sources of truth. As you become
increasingly acquainted with Python you should use these resources more and more.

Third-Party Library Documentation - Third-party libraries publish their documentation on their
own websites, and often times at https://readthedocs.org/. You can judge the quality of a third-party
library by the quality of its documentation. If the developers haven't found time to write good docs,
they probably haven't found the time to polish their library either.

The websites and blogs of prominent experts - The previous resources are primary sources, meaning that
they are documentation from the same people who wrote the code being documented. Primary sources are the most reliable.
Secondary sources are also extremely valuable. The difficulty with secondary sources is determining the credibility of the source.
The websites of authors like Doug Hellmann and developers like Eli Bendersky are excellent.
The blog of an unknown author might be excellent, or it might be rubbish.

StackOverflow - This question and answer site has a good amount of traffic,
so it's likely that someone has asked (and someone has answered) a related question before! However,
answers are provided by volunteers and vary in quality. Always understand solutions before putting them into your program.
One line answers without any explanation are dubious. This is a good place to
find out more about your question or discover alternative search terms.
